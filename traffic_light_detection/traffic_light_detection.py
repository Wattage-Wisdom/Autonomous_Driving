# -*- coding: utf-8 -*-
"""Traffic_Light_Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PPgVf8_yQ9G303dVooEkg6Hg67AQPoSF
"""

from google.colab import drive
drive.mount('/content/drive')

import sys
import cv2
import numpy as np

#Declare variables for light detection

#Semaphore variables
redSemaphore = 0
greenSemaphore = 0

#Color boundaries for red
Rlower = [0, 0, 100] # lower boundaries
Rupper = [100, 100, 255] # upper boundaries
Rlower = np.array(Rlower, dtype = "uint8")
Rupper = np.array(Rupper, dtype = "uint8")

#Color boundaries for green
Glower = [0, 100, 0] # lower boundaries
Gupper = [100, 255, 100] # upper boundaries
Glower = np.array(Glower, dtype = "uint8")
Gupper = np.array(Gupper, dtype = "uint8")

#Image row and color boundaries based on image shape
imin = 0
imax = 111
jmin = 0
jmax = 159
step = 1

#Define a function to transform the image
def image_transform(data):
  cvImage = cv2.imread(data) #Read the data as a cv image
  cvImage = cv2.resize(cvImage, (160,112)) #Resize the image

  return cvImage

#Define a variable to perform color detection and classify light
def light_detection(cvImage):
  #Define masks for color detection
  maskR = cv2.inRange(cvImage, Rlower, Rupper) #Red boundaries mask
  redMask = cv2.bitwise_and(cvImage, cvImage, mask = maskR) #Red filtered image
  maskG = cv2.inRange(cvImage, Glower, Gupper) #Green boundaries mask
  greenMask = cv2.bitwise_and(cvImage, cvImage, mask = maskG) #Green filtered image

  #Reset Semaphore variables to zero
  greenSemaphore = 0
  redSemaphore = 0

  #Look for green Semaphores
  for i in range(imin, imax, step):
    for j in range(jmin, jmax, step):
      if greenMask[i][j][1] > 0: #If that pixel is green
        greenSemaphore += 1 #Add a greenSemaphore
  if greenSemaphore >= 1:
    light_detected = 'Green'
    print('Green_set')

  #Look for red Semaphores
  for i in range(imin, imax, step):
    for j in range(jmin, jmax, step):
      if redMask[i][j][2] > 0: #If that pixel is red
        redSemaphore += 1 #Add a redSemaphore
  if redSemaphore >= 1:
    light_detected = 'Red'
    print('Red_set')

  #If niether Semaphores are found than no traffic light has been detected
  if redSemaphore == 0 and greenSemaphore == 0:
    light_detected = 'No light found'
    print('No light found set')

  # print('Green Semaphores detected: ', greenSemaphore)
  # print('Red Semaphores detected: ', redSemaphore)

  return light_detected

#Transform the image and run the detection function
image = "/content/drive/MyDrive/Traffic_Light_Detection/red_light.png"
transformed_image = image_transform(image)
light_detected = light_detection(transformed_image)
print(light_detected)